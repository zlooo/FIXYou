buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.5.0"
    }
}

plugins {
    id "fr.brouillard.oss.gradle.jgitver" version "0.9.1"
    id "org.sonarqube" version "2.8"
}

ext {
    nettyVersion = '4.1.44.Final'
    slf4jVersion = '1.7.30'
    lombokVersion = '1.18.10'
    daggerVersion = '2.25.4'
    findbugsJsr305Version = '3.0.2'
    javaxInjectVersion = '1'
    disruptorVersion = '3.4.2'
    hppcrtVersion = '0.7.5'
    //    test dependencies
    spockVersion = '2.0-M4-groovy-3.0'
    assertJVersion = '3.14.0'
    springVersion = '5.2.2.RELEASE'
    byteBuddyVersion = '1.10.6'
    objenesisVersion = '3.1'
    quickfixVersion = '2.1.1'
    logbackClassicVersion = '1.2.3'
    transfixVersion = '1.0.2-alpha'
    commonsLangVersion = '3.11'
    jmhVersion = '1.25'
}

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'me.champeau.gradle.jmh'

    group 'io.github.zlooo.fixyou'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    sourceSets {
        integrationTest {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
    }

    configurations {
        integrationTestImplementation.extendsFrom implementation
        integrationTestRuntimeOnly.extendsFrom runtimeOnly
    }

    dependencies {
        compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: "$findbugsJsr305Version"
        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
        testImplementation platform("org.spockframework:spock-bom:$spockVersion")
        testImplementation group: 'org.spockframework', name: 'spock-core'
        testImplementation group: 'net.bytebuddy', name: 'byte-buddy', version: "$byteBuddyVersion"
        testImplementation group: 'org.objenesis', name: 'objenesis', version: "$objenesisVersion"
        testImplementation group: 'org.assertj', name: 'assertj-core', version: "$assertJVersion"
        testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: "$slf4jVersion"
        integrationTestImplementation platform("org.spockframework:spock-bom:$spockVersion")
        integrationTestImplementation group: 'org.spockframework', name: 'spock-core'
        integrationTestImplementation group: 'org.assertj', name: 'assertj-core', version: "$assertJVersion"
        integrationTestImplementation group: 'org.springframework', name: 'spring-test', version: "$springVersion"
        integrationTestImplementation group: 'ch.qos.logback', name: 'logback-classic', version: "$logbackClassicVersion"
        jmhAnnotationProcessor group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: "$jmhVersion"
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "skipped", "failed"
        }
    }

    task integrationTest(type: Test) {
        description = 'Runs integration tests.'
        group = 'verification'

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        shouldRunAfter test
        useJUnitPlatform()
        testLogging {
            events "skipped", "failed"
        }
    }

    jacocoTestReport {
        executionData.from({
            if (new File("${buildDir}/jacoco/integrationTest.exec").exists()) {
                executionData("${buildDir}/jacoco/integrationTest.exec")
            }
        })
        reports {
            xml.enabled true
        }
    }

    checkstyle {
        toolVersion = '8.28'
    }

    publishing {
        publications {
            "${project.name}"(MavenPublication) {
                from components.java
            }
        }
    }
}
