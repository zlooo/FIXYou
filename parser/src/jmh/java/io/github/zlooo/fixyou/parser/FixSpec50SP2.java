package io.github.zlooo.fixyou.parser;

import io.github.zlooo.fixyou.model.ApplicationVersionID;
import io.github.zlooo.fixyou.utils.ArrayUtils;

import java.util.HashMap;
import java.util.Map;

public final class FixSpec50SP2 implements io.github.zlooo.fixyou.model.FixSpec {
    private static final Map<Integer, int[]> REPEATING_GROUPS = createRepeatingGroups();

    private static Map<Integer, int[]> createRepeatingGroups() {
        final Map<Integer, int[]> result = new HashMap<>(106);
        result.put(768, new int[]{769, 770, 771, 1033, 1034, 1035});
        result.put(1286, new int[]{1287, 1288, 1289, 1290, 1291});
        result.put(518, new int[]{519, 520, 521});
        result.put(778, new int[]{453, 172, 169, 170, 171, 85, 162, 163, 214, 54, 460, 167, 461, 120, 168, 126, 779, 492, 476, 488, 489, 503, 490, 491, 504, 505});
        result.put(267, new int[]{269});
        result.put(268, new int[]{235, 236, 701, 696, 697, 698, 218, 220, 221, 222, 662, 663, 699, 761, 1177, 453, 1445, 55, 65, 48, 22, 460, 1227, 1151, 461, 167, 762, 200, 541, 1079, 966, 1049, 965, 224, 225, 239, 226, 227, 228, 255, 543, 470, 471, 472, 240, 202, 947, 967, 968, 206, 231, 969, 1146, 996, 1147, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 201, 1244, 1242, 997, 223, 207, 970, 971, 106, 348, 349, 107, 350, 351, 691, 667, 875, 876, 873, 874, 1435, 1439, 1449, 1450, 1451, 1452, 1457, 1458, 1478, 1479, 1480, 1481, 1482, 1184, 1185, 1186, 454, 864, 1018, 1483, 711, 555, 1175, 269, 278, 270, 423, 40, 15, 271, 1093, 272, 273, 274, 275, 336, 625, 326, 327, 276, 277, 282, 283, 284, 286, 59, 432, 126, 110, 18, 287, 37, 198, 299, 288, 289, 346, 290, 546, 811, 58, 354, 355, 1023, 528, 1024, 332, 333, 1020, 63, 64, 1070, 83, 1048, 1026, 1027, 120, 828, 1025, 31, 279, 285, 1173, 264, 280, 291, 292, 574, 1003, 451, 483, 60, 1500});
        result.put(1292, new int[]{1296, 1293, 1294, 1295});
        result.put(781, new int[]{801, 782, 783, 784});
        result.put(1296, new int[]{1297, 1298});
        result.put(534, new int[]{41, 535, 536});
        result.put(539, new int[]{804, 524, 525, 538});
        result.put(1052, new int[]{1053, 1054});
        result.put(1309, new int[]{1237, 1239, 1232, 1235, 1141, 336, 625});
        result.put(1310, new int[]{1201, 1301, 1300});
        result.put(1311, new int[]{1313, 1314});
        result.put(1312, new int[]{1210, 1211});
        result.put(33, new int[]{58, 354, 355});
        result.put(801, new int[]{785, 786});
        result.put(1058, new int[]{1062, 1059, 1060, 1061});
        result.put(802, new int[]{523, 803});
        result.put(804, new int[]{545, 805});
        result.put(806, new int[]{760, 807});
        result.put(1062, new int[]{1063, 1064});
        result.put(295, new int[]{55, 65, 48, 22, 460, 1227, 1151, 461, 167, 762, 200, 541, 1079, 966, 1049, 965, 224, 225, 239, 226, 227, 228, 255, 543, 470, 471, 472, 240, 202, 947, 967, 968, 206, 231, 969, 1146, 996, 1147, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 201, 1244, 1242, 997, 223, 207, 970, 971, 106, 348, 349, 107, 350, 351, 691, 667, 875, 876, 873, 874, 1435, 1439, 1449, 1450, 1451, 1452, 1457, 1458, 1478, 1479, 1480, 1481, 1482, 1184, 1185, 1186, 454, 864, 1018, 1483, 913, 914, 915, 918, 788, 916, 917, 919, 898, 711, 555, 299, 132, 133, 134, 135, 62, 188, 190, 189, 191, 631, 632, 633, 634, 60, 336, 625, 64, 40, 193, 192, 642, 643, 15, 1167, 368, 775, 528, 529});
        result.put(296, new int[]{311, 312, 309, 305, 462, 463, 310, 763, 313, 542, 1213, 241, 242, 243, 244, 245, 246, 256, 595, 592, 593, 594, 247, 316, 941, 317, 436, 998, 1423, 1424, 1425, 1000, 1419, 435, 308, 306, 362, 363, 307, 364, 365, 877, 878, 972, 318, 879, 975, 973, 974, 810, 882, 883, 884, 885, 886, 1044, 1045, 1046, 1038, 1039, 315, 1437, 1441, 1453, 1454, 1455, 1456, 1459, 1460, 295, 295, 302, 304, 1168, 1169, 1170, 893, 367});
        result.put(552, new int[]{453, 38, 152, 516, 468, 469, 78, 12, 13, 479, 497, 576, 518, 232, 136, 78, 1016, 1158, 37, 198, 11, 526, 66, 1080, 1081, 1431, 40, 44, 99, 18, 39, 151, 14, 59, 126, 528, 529, 1432, 821, 1093, 483, 586, 775, 1138, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 54, 41, 11, 526, 583, 586, 229, 75, 376, 58, 354, 355, 1, 660, 581, 589, 590, 591, 70, 854, 528, 529, 1091, 582, 121, 120, 775, 77, 203, 544, 635, 377, 659, 962, 1009, 1005, 1006, 1007, 83, 1008, 430, 1154, 1155, 81, 575, 578, 579, 336, 625, 943, 157, 230, 158, 159, 738, 920, 921, 922, 238, 237, 118, 119, 155, 156, 752, 825, 826, 1072, 1057, 1139, 1115, 1427, 1428, 1429, 1444});
        result.put(809, new int[]{553});
        result.put(555, new int[]{600, 601, 602, 603, 607, 608, 609, 764, 610, 611, 1212, 248, 249, 250, 251, 252, 253, 257, 599, 596, 597, 598, 254, 612, 942, 613, 614, 999, 1224, 1421, 1422, 1001, 1420, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 556, 740, 739, 955, 956, 1358, 1017, 1436, 1440, 683, 670, 948, 676, 677, 678, 679, 680, 539, 1342, 687, 685, 690, 1366, 564, 565, 654, 587, 588, 637, 675, 1073, 1074, 1075, 1379, 1381, 1383, 1384, 1418, 682, 686, 681, 684, 1067, 1068, 990, 1152});
        result.put(558, new int[]{167, 762, 460, 461, 60});
        result.put(816, new int[]{817});
        result.put(1334, new int[]{1335, 1336});
        result.put(1342, new int[]{1330, 1331, 1332, 1333, 1344, 1337, 1338, 1339, 1345, 1405, 1340, 1391, 1343, 1341, 1392, 1334});
        result.put(576, new int[]{577});
        result.put(580, new int[]{75, 779, 60});
        result.put(1351, new int[]{539, 1355, 1182, 1183, 1433, 1357, 1354, 1399});
        result.put(73, new int[]{453, 78, 1138, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 386, 55, 65, 48, 22, 460, 1227, 1151, 461, 167, 762, 200, 541, 1079, 966, 1049, 965, 224, 225, 239, 226, 227, 228, 255, 543, 470, 471, 472, 240, 202, 947, 967, 968, 206, 231, 969, 1146, 996, 1147, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 201, 1244, 1242, 997, 223, 207, 970, 971, 106, 348, 349, 107, 350, 351, 691, 667, 875, 876, 873, 874, 1435, 1439, 1449, 1450, 1451, 1452, 1457, 1458, 1478, 1479, 1480, 1481, 1482, 1184, 1185, 1186, 454, 864, 1018, 1483, 711, 232, 38, 152, 516, 468, 469, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 218, 220, 221, 222, 662, 663, 699, 761, 235, 236, 701, 696, 697, 698, 12, 13, 479, 497, 211, 1094, 835, 836, 837, 838, 840, 1096, 1097, 1098, 1099, 388, 389, 841, 842, 843, 844, 846, 957, 756, 11, 526, 67, 583, 160, 229, 75, 1, 660, 581, 589, 590, 70, 591, 63, 64, 544, 635, 21, 18, 110, 1089, 1090, 111, 100, 1133, 81, 140, 54, 401, 114, 60, 854, 40, 423, 44, 1092, 99, 15, 376, 377, 23, 117, 1080, 1081, 59, 168, 432, 126, 427, 528, 529, 1091, 582, 121, 120, 775, 58, 354, 355, 193, 192, 640, 77, 203, 210, 847, 848, 849, 494, 37, 198, 66, 38, 799, 800, 14, 39, 636, 151, 84, 6, 103});
        result.put(78, new int[]{539, 12, 13, 479, 497, 136, 576, 172, 169, 170, 171, 85, 948, 756, 79, 661, 366, 1047, 467, 776, 161, 360, 361, 989, 993, 992, 80, 573, 81, 1002, 208, 209, 153, 154, 119, 737, 120, 736, 155, 156, 742, 741, 635, 780, 1136});
        result.put(1362, new int[]{1414, 1363, 1364, 1365, 1443});
        result.put(85, new int[]{781, 165, 787});
        result.put(1370, new int[]{1372, 1371});
        result.put(604, new int[]{605, 606});
        result.put(1116, new int[]{1120, 1117, 1118, 1119});
        result.put(862, new int[]{528, 529, 863});
        result.put(1120, new int[]{1121, 1122});
        result.put(864, new int[]{865, 866, 1145, 867, 868});
        result.put(870, new int[]{871, 872});
        result.put(1387, new int[]{1388, 1389});
        result.put(627, new int[]{628, 629, 630});
        result.put(1141, new int[]{1022, 264, 1021});
        result.put(887, new int[]{888, 889});
        result.put(124, new int[]{32, 17, 527, 31, 669, 29, 1003, 1041});
        result.put(382, new int[]{375, 337, 437, 438, 655});
        result.put(384, new int[]{372, 385, 1130, 1406, 1131, 1410});
        result.put(897, new int[]{571, 818});
        result.put(386, new int[]{1237, 1239, 1232, 1235, 1141, 336, 625, 207, 1301, 1300, 1326, 338, 339, 325, 340, 567, 341, 342, 343, 344, 345, 387, 58, 354, 355, 60, 1327});
        result.put(1413, new int[]{1412, 1411});
        result.put(1414, new int[]{1413, 1415, 1416, 1417});
        result.put(1158, new int[]{781, 1164});
        result.put(136, new int[]{137, 138, 139, 891});
        result.put(1165, new int[]{55, 65, 48, 22, 460, 1227, 1151, 461, 167, 762, 200, 541, 1079, 966, 1049, 965, 224, 225, 239, 226, 227, 228, 255, 543, 470, 471, 472, 240, 202, 947, 967, 968, 206, 231, 969, 1146, 996, 1147, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 201, 1244, 1242, 997, 223, 207, 970, 971, 106, 348, 349, 107, 350, 351, 691, 667, 875, 876, 873, 874, 1435, 1439, 1449, 1450, 1451, 1452, 1457, 1458, 1478, 1479, 1480, 1481, 1482, 1184, 1185, 1186, 454, 864, 1018, 1483, 453, 1158, 430, 1161, 1162, 1163, 1157, 119, 15, 120, 155, 64, 168, 126, 779});
        result.put(398, new int[]{399, 400, 401, 404, 441, 402, 403, 405, 406, 407, 408});
        result.put(146, new int[]{55, 65, 48, 22, 460, 1227, 1151, 461, 167, 762, 200, 541, 1079, 966, 1049, 965, 224, 225, 239, 226, 227, 228, 255, 543, 470, 471, 472, 240, 202, 947, 967, 968, 206, 231, 969, 1146, 996, 1147, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 201, 1244, 1242, 997, 223, 207, 970, 971, 106, 348, 349, 107, 350, 351, 691, 667, 875, 876, 873, 874, 1435, 1439, 1449, 1450, 1451, 1452, 1457, 1458, 1478, 1479, 1480, 1481, 1482, 1184, 1185, 1186, 454, 864, 1018, 1483, 711, 555, 913, 914, 915, 918, 788, 916, 917, 919, 898, 38, 152, 516, 468, 469, 232, 555, 735, 218, 220, 221, 222, 662, 663, 699, 761, 235, 236, 701, 696, 697, 698, 453, 1445, 1305, 1221, 1230, 1240, 668, 869, 870, 1201, 555, 555, 15, 537, 63, 64, 271, 1500, 140, 303, 336, 625, 229, 54, 854, 110, 193, 192, 1, 660, 581, 692, 40, 62, 126, 60, 423, 44, 640, 120, 292, 58, 354, 355, 1504, 1324, 1617, 1502});
        result.put(1175, new int[]{1176});
        result.put(1177, new int[]{1178, 1179});
        result.put(670, new int[]{756, 671, 672, 673, 674, 1367});
        result.put(420, new int[]{12, 13, 479, 497, 66, 54, 336, 625, 430, 63, 64, 1, 660, 421, 44, 423, 406, 58, 354, 355});
        result.put(1445, new int[]{1446, 1447, 1448});
        result.put(936, new int[]{930, 931, 283, 284, 928, 929});
        result.put(938, new int[]{896});
        result.put(683, new int[]{688, 689});
        result.put(428, new int[]{55, 65, 48, 22, 460, 1227, 1151, 461, 167, 762, 200, 541, 1079, 966, 1049, 965, 224, 225, 239, 226, 227, 228, 255, 543, 470, 471, 472, 240, 202, 947, 967, 968, 206, 231, 969, 1146, 996, 1147, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 201, 1244, 1242, 997, 223, 207, 970, 971, 106, 348, 349, 107, 350, 351, 691, 667, 875, 876, 873, 874, 1435, 1439, 1449, 1450, 1451, 1452, 1457, 1458, 1478, 1479, 1480, 1481, 1482, 1184, 1185, 1186, 454, 864, 1018, 1483, 711, 140, 11, 526, 54, 44, 15, 58, 354, 355});
        result.put(1201, new int[]{1236, 1223, 1202, 1203, 1204, 1304});
        result.put(948, new int[]{952, 949, 950, 951});
        result.put(1205, new int[]{1206, 1207, 1208, 1209});
        result.put(1461, new int[]{1462, 1463, 1464});
        result.put(952, new int[]{953, 954});
        result.put(957, new int[]{958, 959, 960});
        result.put(702, new int[]{539, 703, 704, 705, 706, 976});
        result.put(1218, new int[]{1219, 1220});
        result.put(1475, new int[]{1476, 1477});
        result.put(453, new int[]{802, 448, 447, 452});
        result.put(454, new int[]{455, 456});
        result.put(199, new int[]{104});
        result.put(711, new int[]{311, 312, 309, 305, 462, 463, 310, 763, 313, 542, 1213, 241, 242, 243, 244, 245, 246, 256, 595, 592, 593, 594, 247, 316, 941, 317, 436, 998, 1423, 1424, 1425, 1000, 1419, 435, 308, 306, 362, 363, 307, 364, 365, 877, 878, 972, 318, 879, 975, 973, 974, 810, 882, 883, 884, 885, 886, 1044, 1045, 1046, 1038, 1039, 315, 1437, 1441, 1453, 1454, 1455, 1456, 1459, 1460, 984, 732, 733, 1037, 944});
        result.put(457, new int[]{458, 459});
        result.put(1483, new int[]{1491, 1484, 1485, 1486, 1487, 1488, 1489, 1490});
        result.put(1232, new int[]{1308});
        result.put(1234, new int[]{1093, 1231});
        result.put(1491, new int[]{1494, 1492, 1493});
        result.put(1235, new int[]{1142, 574});
        result.put(1236, new int[]{1222, 1303, 1302, 1241, 1226, 1229});
        result.put(1237, new int[]{40});
        result.put(981, new int[]{982, 983});
        result.put(1494, new int[]{1495, 1496});
        result.put(1239, new int[]{59});
        result.put(215, new int[]{216, 217});
        result.put(984, new int[]{985, 986, 987, 988});
        result.put(473, new int[]{539, 509, 511, 474, 482, 522, 486, 475});
        result.put(1499, new int[]{453, 146, 146});
        result.put(735, new int[]{695});
        result.put(232, new int[]{233, 234});
        result.put(753, new int[]{707, 708, 1055});
        result.put(756, new int[]{806, 757, 758, 759});
        result.put(1016, new int[]{1012, 1013, 1014});
        result.put(1018, new int[]{1052, 1019, 1050, 1051});
        result.put(510, new int[]{477, 512, 478, 498, 499, 500, 501, 502});
        return result;
    }

    @Override
    public int[] getFieldsOrder() {
        return new int[]{8, 9, 35, 7, 10, 16, 34, 36, 43, 45, 49, 50, 52, 56, 57, 58, 89, 90, 91, 93, 95, 96, 97, 98, 108, 112, 115, 116, 122, 123, 128, 129, 141, 142, 143, 144, 145, 212, 213, 347, 354, 355, 369, 371, 372, 373, 383, 384, 385, 464, 553, 554, 627, 628, 629, 630, 789, 1128, 1129, 1130, 1131, 1137, 1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 44, 48, 53, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 94, 99, 100, 102, 103, 104, 106, 107, 110, 111, 113, 114, 117, 118, 119, 120, 121, 124, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 374, 375, 376, 377, 378, 379, 380, 381, 382, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1617};
    }

    @Override
    public char[][] getMessageTypes() {
        return new char[][]{{'A', 'A'}, {'A', 'B'}, {'A', 'C'}, {'A', 'D'}, {'A', 'E'}, {'A', 'F'}, {'A', 'G'}, {'A', 'H'}, {'A', 'I'}, {'A', 'J'}, {'A', 'K'}, {'A', 'L'}, {'A', 'M'}, {'A', 'N'}, {'A', 'O'}, {'A', 'P'}, {'0'}, {'A', 'Q'}, {'1'}, {'A', 'R'}, {'2'}, {'A', 'S'}, {'3'}, {'A', 'T'}, {'4'}, {'A', 'U'}, {'5'}, {'A', 'V'}, {'6'}, {'A', 'W'}, {'7'}, {'A', 'X'}, {'8'}, {'A', 'Y'}, {'9'}, {'A', 'Z'}, {'B', 'A'}, {'B', 'B'}, {'A'}, {'B', 'C'}, {'B'}, {'B', 'D'}, {'C'}, {'B', 'E'}, {'D'}, {'B', 'F'}, {'E'}, {'B', 'G'}, {'F'}, {'B', 'H'}, {'G'}, {'B', 'I'}, {'H'}, {'B', 'J'}, {'B', 'K'}, {'J'}, {'B', 'L'}, {'K'}, {'B', 'M'}, {'L'}, {'B', 'N'}, {'M'}, {'B', 'O'}, {'N'}, {'B', 'P'}, {'B', 'Q'}, {'P'}, {'B', 'R'}, {'Q'}, {'B', 'S'}, {'R'}, {'B', 'T'}, {'S'}, {'B', 'U'}, {'T'}, {'B', 'V'}, {'B', 'W'}, {'V'}, {'B', 'X'}, {'W'}, {'B', 'Y'}, {'X'}, {'B', 'Z'}, {'Y'}, {'Z'}, {'C', 'A'}, {'C', 'B'}, {'C', 'C'}, {'a'}, {'C', 'D'}, {'b'}, {'C', 'E'}, {'c'}, {'d'}, {'e'}, {'f'}, {'g'}, {'h'}, {'i'}, {'j'}, {'k'}, {'l'}, {'m'}, {'o'}, {'p'}, {'q'}, {'r'}, {'s'}, {'t'}, {'u'}, {'v'}, {'w'}, {'x'}, {'y'}, {'z'}};
    }

    @Override
    public int highestFieldNumber() {
        return 1617;
    }

    @Override
    public ApplicationVersionID applicationVersionId() {
        return ApplicationVersionID.FIX50SP2;
    }

    @Override
    public int[] getRepeatingGroupFieldNumbers(int groupNumber) {
        return REPEATING_GROUPS.getOrDefault(groupNumber, ArrayUtils.EMPTY_INT_ARRAY);
    }
}
